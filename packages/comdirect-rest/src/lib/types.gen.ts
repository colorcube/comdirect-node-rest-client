// This file is auto-generated by @hey-api/openapi-ts

/**
 * Master data of an account
 */
export type Account = {
    /**
     * Account identifier (UUID)
     */
    readonly accountId?: string;
    /**
     * Account identfier
     */
    readonly accountDisplayId?: string;
    /**
     * Account currency
     */
    readonly currency?: CurrencyString;
    /**
     * Identification Code of the client (UUID)
     */
    readonly clientId?: string;
    /**
     * Account type. 'key' contains the product type, 'text' a description
     */
    readonly accountType?: EnumText;
    /**
     * IBAN (International bank account number), if available
     */
    readonly iban?: string;
    /**
     * Credit limit, if available
     */
    readonly creditLimit?: AmountValue;
};

/**
 * Account information, including cash balance and buying power
 */
export type AccountBalance = {
    /**
     * The master data of this account (attribute can be suppressed by using the parameter 'without-attr=account')
     */
    readonly account?: Account;
    /**
     * Account identifier (UUID)
     */
    readonly accountId?: string;
    /**
     * Current balance
     */
    readonly balance?: AmountValue;
    /**
     * Current balance in EUR
     */
    readonly balanceEUR?: AmountValue;
    /**
     * Sum of current account balance + credit limit - sum of funds, which are already planned but not yet booked. This is the maximum cash limit
     */
    readonly availableCashAmount?: AmountValue;
    /**
     * As 'availableCashAmount', but in EUR
     */
    readonly availableCashAmountEUR?: AmountValue;
};

/**
 * Model for the information of an account (debtor/creditor).
 */
export type AccountInformation = {
    /**
     * name of the account owner
     */
    readonly holderName?: string;
    /**
     * The IBAN (International bank account number) for the account - if available
     */
    readonly iban?: string;
    /**
     * The BIC (Bank Identifier Code) for the IBAN - if available
     */
    readonly bic?: string;
};

/**
 * Model for an account transaction.
 */
export type AccountTransaction = {
    /**
     * unique reference code of the transaction
     */
    readonly reference?: string;
    /**
     * Status of transaction
     */
    readonly bookingStatus?: 'BOOKED' | 'NOTBOOKED';
    /**
     * The booking date
     */
    readonly bookingDate?: DateString;
    /**
     * The amount
     */
    readonly amount?: AmountValue;
    /**
     * Account information of name, IBAN and BIC of the remitter.
     */
    readonly remitter?: AccountInformation;
    /**
     * Account information of name, IBAN and BIC of the debtor
     */
    readonly deptor?: AccountInformation;
    /**
     * includes the account information of the name, IBAN and BIC from the creditor
     */
    readonly creditor?: AccountInformation;
    /**
     * Availability date (yyyy-mm-dd). Could be an invalid date e.g. 2019-12-32
     */
    readonly valutaDate?: string;
    /**
     * Gives back the creditor identifier of an account transaction, if it is a direct debit.
     */
    readonly directDebitCreditorId?: string;
    /**
     * Gives back the mandateId of an account transaction, if it is a direct debit.
     */
    readonly directDebitMandateId?: string;
    /**
     * Gives back the end-to-end-reference of an account transaction, if it is a direct debit.
     */
    readonly endToEndReference?: string;
    /**
     * Shows whether the client has seen the account transaction in web.
     */
    readonly newTransaction?: boolean;
    /**
     * remittance information of the transaction. This can be more then one line with a length of 35 symbols. The lines will be numbered in case of an already booked transaction.
     */
    readonly remittanceInfo?: string;
    /**
     * Definition of account transaction type.
     */
    readonly transactionType?: EnumText;
};

export type AggregatedInfo = unknown;

/**
 * Represents the amount value with the currency.
 */
export type AmountValue = {
    /**
     * Nominal value in corresponding unit
     */
    readonly value?: string;
    /**
     * {XXX, XXC, XXM, XXP, XXU} or currencies according to ISO-4217 (EUR, USD, GBP,...)
     */
    readonly unit?: string;
};

/**
 * A balance object is equal to one of the types indicated by the attributes in this definition.
 */
export type Balance = {
    /**
     * Balance object for an account
     */
    accountBalance?: AccountBalance;
    /**
     * Balance object for a card
     */
    cardBalance?: CardBalance;
    /**
     * Aggregation object for a depot
     */
    depotAggregation?: DepotAggregation;
    /**
     * Balance object for a fixed term saving
     */
    fixedTermSavings?: FixedTermSavings;
    /**
     * Balance object for an installment loan
     */
    installmentLoanBalance?: InstallmentLoanBalance;
};

/**
 * Model for an error
 */
export type BusinessMessage = {
    /**
     * Identifier for the error
     */
    key?: 'request.object.invalid' | 'request.query.invalid';
    /**
     * Severity level of the error
     */
    severity?: 'ERROR' | 'INFO' | 'WARN';
    /**
     * Default error message
     */
    message?: string;
    /**
     * List of properties causing validation errors
     */
    origin?: Array<(string)>;
    /**
     * Arguments for the error message
     */
    args?: Array<unknown>;
};

/**
 * Model for a card.
 */
export type Card = {
    /**
     * Card identifier (UUID).
     */
    readonly cardId?: string;
    /**
     * Type of the card. 'key' contains the card type, 'text' a description
     */
    readonly cardType?: EnumText;
    /**
     * Client connection uniquely assigned to the credit card account.
     */
    readonly clientId?: string;
    /**
     * Contract code of the client uniquely assigned to the credit card account.
     */
    readonly participantId?: string;
    /**
     * Name of the card holder
     */
    readonly holderName?: string;
    /**
     * Default settlement account number uniquely assigned to the credit card account. In this case, it has to be the current account.
     */
    readonly settlementAccountId?: string;
    /**
     * Partially masked credit card number.
     */
    readonly cardDisplayId?: string;
    /**
     * validity of the card. Format: MM/YY
     */
    readonly cardValidity?: string;
    /**
     * Image of the card.
     */
    readonly cardImage?: VisaCardImage;
    /**
     * Last 4 digits of the credit card number
     */
    readonly primaryAccountNumberSuffix?: string;
    /**
     * Card limit if available. Will be 0.00 EUR if card has no limit.
     */
    cardLimit?: AmountValue;
    /**
     * Status of the card.
     */
    status?: 'ACTIVE' | 'INACTIVE' | 'IN_CHANGE' | 'UNKNOWN';
};

/**
 * Model for a card balance.
 */
export type CardBalance = {
    /**
     * Card identifier (UUID).
     */
    readonly cardId?: string;
    /**
     * Master data of the card.
     */
    readonly card?: Card;
    /**
     * Current balance.
     */
    readonly balance?: AmountValue;
    /**
     * Sum of current account balance + credit limit - sum of scheduled amounts which are not booked yet. This is the maximum cash limit.
     */
    readonly availableCashAmount?: AmountValue;
};

/**
 * Cost entry of a cost group.
 */
export type CostEntry = {
    /**
     * Type of the cost entry
     */
    readonly type?: 'E' | 'F' | 'P';
    /**
     * Label of the cost entry
     */
    readonly label?: string;
    /**
     * Cost in trading currency
     */
    readonly amount?: AmountValue;
    /**
     * Cost in reporting currency
     */
    readonly amountReportingCurrency?: AmountValue;
    /**
     * Inducement of the cost entry
     */
    readonly inducement?: Inducement;
};

/**
 * Model for a cost group including a list of cost entries for this cost group.
 */
export type CostGroup = {
    /**
     * Type of cost group. K: Costs of securities purchase, H: Costs of the holding period (per year), V: Costs of the sale of securities
     */
    readonly type?: 'K' | 'H' | 'V';
    /**
     * Name of cost group for showing in the cost-note
     */
    readonly label?: string;
    /**
     * Sum of the cost group in trading currency (quantity.amount.unit)
     */
    readonly sum?: AmountValue;
    /**
     * Sum of the cost group in reporting currency
     */
    readonly sumReportingCurrency?: AmountValue;
    /**
     * List of costs per cost group
     */
    readonly costs?: Array<CostEntry>;
};

/**
 * Ex-ante cost indication on the basis of the order data.
 */
export type CostIndicationExAnte = {
    /**
     * Securities account number (UUID)
     */
    readonly depotId?: string;
    /**
     * Result of calculation of cost indication; if false, linkCosts will link to a generic cost indication
     */
    readonly calculationSuccessful?: boolean;
    /**
     * Instrument name analogous to Instrument.name
     */
    readonly name?: string;
    /**
     * WKN analogous to Instrument.wkn
     */
    readonly wkn?: string;
    /**
     * Type of transaction analogous to Order.side
     */
    readonly side?: 'BUY' | 'SELL';
    /**
     * Quantity analogous to Order.quantity
     */
    readonly quantity?: AmountValue;
    /**
     * Limit analogous to Order.limit with trading currency
     */
    readonly limit?: AmountValue;
    /**
     * Expected value (net costs) of the order: in trading currency
     */
    readonly expectedValue?: AmountValue;
    /**
     * Execution venue as name for the display
     */
    readonly venueName?: string;
    /**
     * Settlement currency analogous to Account.currency
     */
    readonly settlementCurrency?: CurrencyString;
    /**
     * Trading currency
     */
    readonly tradingCurrency?: CurrencyString;
    /**
     * Reporting currency
     */
    readonly reportingCurrency?: CurrencyString;
    /**
     * Exchange rate for settlement currency to FX, for buy and sell (both sides for conversion depending on BUY/SELL)
     */
    readonly fxRate?: FXRateEUR;
    /**
     * Expected costs for order analogue (real) settlement costs
     */
    readonly expectedSettlementCosts?: AmountValue;
    /**
     * CostGroup type K
     */
    readonly purchaseCosts?: CostGroup;
    /**
     * CostGroup type H
     */
    readonly holdingCosts?: CostGroup;
    /**
     * CostGroup type V
     */
    readonly salesCosts?: CostGroup;
    /**
     * Holding period in years, displayed on purchase
     */
    readonly holdingPeriod?: string;
    /**
     * Absolute amount of the total costs
     */
    readonly totalCostsAbs?: AmountValue;
    /**
     * Amount of total costs relative to the investment
     */
    readonly totalCostsRel?: PercentageString;
    /**
     * Total cost block including total cost entries segregated as: E (own service costs of bank), F (external service costs), and P (product costs)
     */
    readonly totalCostsDetail?: TotalCostBlock;
    /**
     * List of cost blocks over time
     */
    readonly totalHoldingCosts?: TotalHoldingCostBlock;
    /**
     * HTTP link to further cost information
     */
    readonly linkCosts?: string;
    /**
     * HTTP link to key information document
     */
    readonly linkKid?: string;
};

/**
 * Represents the ISO-4217 code of the currency.
 */
export type CurrencyString = {
    Currency?: string;
};

/**
 * Represents the date without the time.
 */
export type DateString = {
    /**
     * Time with format: 'yyyy-MM-dd'
     */
    date?: string;
};

/**
 * Represents the date with the time.
 */
export type DateTimeString = {
    /**
     * Time with format: 'yyyy-MM-dd'T'HH:mm:ssX'
     */
    dateTime?: string;
};

export type Depot = {
    /**
     * Securities account Identifier (UUID)
     */
    readonly depotId?: string;
    /**
     * Securities account Number
     */
    readonly depotDisplayId?: string;
    /**
     * Identification code of the client uniquely assigned to the securities account
     */
    readonly clientId?: string;
    /**
     * Default settlement account number uniquely assigned to the securities account
     */
    readonly defaultSettlementAccountId?: string;
    /**
     * List of other settlement account identification numbers assigned to the securities account
     */
    readonly settlementAccountIds?: Array<(string)>;
};

export type DepotAggregation = {
    /**
     * The master data of this securities account (this attribute can be suppressed by using the parameter 'without-attr=depot')
     */
    readonly depot?: Depot;
    /**
     * Securities account Identifier (UUID)
     */
    readonly depotId?: string;
    /**
     * Date of the last update of securities holdings & master data. YYYY-MM-DD
     */
    readonly dateLastUpdate?: string;
    /**
     * Current value of the securities account (the sum of all the securities holdings at their current prices)
     */
    readonly currentValue?: AmountValue;
    /**
     * Sum of the purchase values of all the securities holdings
     */
    readonly purchaseValue?: AmountValue;
    /**
     * Value of the securities account (the sum of all the securities holdings at the closing prices of the previous day)
     */
    readonly prevDayValue?: AmountValue;
    /**
     * Sum of the lending values of all of the securities holdings
     */
    readonly lendingValue?: AmountValue;
    /**
     * Profit/loss at the absolute purchase value
     */
    readonly profitLossPurchaseAbs?: AmountValue;
    /**
     * Profit/loss relative to purchase value in percentage
     */
    readonly profitLossPurchaseRel?: PercentageString;
    /**
     * Absolute profit/loss compared to the previous day
     */
    readonly profitLossPrevDayAbs?: AmountValue;
    /**
     * Profit/Loss compared to the previous day in percentage
     */
    readonly profitLossPrevDayRel?: PercentageString;
};

export type DepotPosition = {
    /**
     * Securities account Identifier (UUID)
     */
    readonly depotId?: string;
    /**
     * Position identification number in securities account
     */
    readonly positionId?: string;
    /**
     * Identification number of the instrument
     */
    readonly wkn?: string;
    /**
     * Custody type
     */
    readonly custodyType?: string;
    /**
     * Quantity or nominal amount in case of a percentage quotation
     */
    readonly quantity?: AmountValue;
    /**
     * Available quantity or nominal amount in case of a percentage quotation
     */
    readonly availableQuantity?: AmountValue;
    /**
     * Current price, if available
     */
    readonly currentPrice?: Price;
    /**
     * Purchase price, if available
     */
    readonly purchasePrice?: AmountValue;
    /**
     * Price of the previous day, if available
     */
    readonly prevDayPrice?: Price;
    /**
     * Current value of the position
     */
    readonly currentValue?: AmountValue;
    /**
     * Average purchase value of the position
     */
    readonly purchaseValue?: AmountValue;
    /**
     * Position value at previous day's closing price
     */
    readonly prevDayValue?: AmountValue;
    /**
     * Absolute profit/loss at purchase price, if available
     */
    readonly profitLossPurchaseAbs?: AmountValue;
    /**
     * Profit/loss relative to purchase value in percentage, if available
     */
    readonly profitLossPurchaseRel?: PercentageString;
    /**
     * Absolute profit/loss compared to previous day, if available
     */
    readonly profitLossPrevDayAbs?: AmountValue;
    /**
     * Profit/Loss compared to previous day in percentage, if available
     */
    readonly profitLossPrevDayRel?: PercentageString;
    /**
     * Information about the instrument of the securities position
     */
    readonly instrument?: Instrument;
    /**
     * Position version, if available
     */
    readonly version?: string;
};

/**
 * Model for a depot transaction.
 */
export type DepotTransaction = {
    /**
     * Transaction Identifier (UUID)
     */
    readonly transactionId?: string;
    /**
     * Status of transaction
     */
    readonly bookingStatus?: 'BOOKED' | 'NOTBOOKED';
    /**
     * The booking date
     */
    readonly bookingDate?: DateString;
    /**
     * Date and time of settlement
     */
    readonly settlementDate?: DateTimeString;
    /**
     * The business date
     */
    readonly businessDate?: DateString;
    /**
     * The quantity
     */
    readonly quantity?: AmountValue;
    /**
     * InstrumentId as UUID
     */
    readonly instrumentId?: string;
    /**
     * Information about the instrument of the securities position
     */
    readonly instrument?: Instrument;
    /**
     * Price of the execution
     */
    readonly executionPrice?: AmountValue;
    /**
     * Value of the transaction
     */
    readonly transactionValue?: AmountValue;
    /**
     * Transaction direction
     */
    readonly transactionDirection?: 'IN' | 'OUT';
    /**
     * On the basis of securities account turnover transaction type
     */
    readonly transactionType?: 'BUY' | 'SELL' | 'TRANSFER_IN' | 'TRANSFER_OUT' | 'OTHER';
    /**
     * Exchange rate settlement currency EUR to FX if exectionPrice amount is not notated in EUR
     */
    readonly fxRate?: FXRateEUR;
};

/**
 * additional data of a derivative
 */
export type DerivativeData = {
    /**
     * the underlying instrument
     */
    readonly underlyingInstrument?: Instrument;
    /**
     * Price of the underlying
     */
    readonly underlyingPrice?: Price;
    /**
     * Certificate Type
     */
    readonly certificateType?: 'Hebel' | 'Index' | 'Basket' | 'Hedge-Fonds-Zertifikat' | 'Discount' | 'Aktienanleihe' | 'Bandbreite' | 'Outperformance' | 'Express' | 'Bonus' | 'Kapitalschutz';
    /**
     * rating
     */
    readonly rating?: Rating;
    /**
     * strike price of the underlying
     */
    readonly strikePrice?: AmountValue;
    /**
     * Leverage of the derivate
     */
    readonly leverage?: string;
    /**
     * multiplier of the underlying
     */
    readonly multiplier?: string;
    /**
     * expiry date of a derivative
     */
    readonly expiryDate?: string;
    /**
     * yield p.a.
     */
    readonly yieldPA?: string;
    /**
     * remaining Term (expiryDate-today)
     */
    readonly remainingTermInYears?: string;
    /**
     * nominal rate
     */
    readonly nominalRate?: string;
    /**
     * Warrant Type
     */
    readonly warrantType?: 'Call' | 'Put';
    /**
     * maturity Date of a bonds
     */
    readonly maturityDate?: string;
    /**
     * date of the interest payment of a bond
     */
    readonly interestPaymentDate?: string;
    /**
     * interval of the interest payment of a bond",allowableValues = "monthly, quarterly, biannualy, annualy
     */
    readonly interestPaymentInterval?: 'MONTHLY' | 'QUARTERLY' | 'SEMIANNUALLY' | 'ANNUALLY' | 'OTHER';
};

/**
 * Model for dimensions.
 */
export type Dimensions = {
    venues?: Array<Venue>;
};

/**
 * Model for a document.
 */
export type Document = {
    /**
     * Unique ID of the document (UUID)
     */
    readonly documentId?: string;
    /**
     * Name or description of the document.
     */
    readonly name?: string;
    /**
     * Date at which the Document was assigned to the client.
     */
    readonly dateCreation?: string;
    /**
     * The native mimeType of the document.
     */
    readonly mimeType?: string;
    /**
     * Is the client allowed to delete the document?
     */
    readonly deletable?: boolean;
    /**
     * Is the document advertising comdirect products?
     */
    readonly advertisement?: boolean;
    /**
     * Object containing optional information about the document. Available information will differ between categories.
     */
    readonly documentMetaData?: DocumentMetadata;
};

/**
 * Model for category-specific metadata of documents.
 */
export type DocumentMetadata = {
    /**
     * Is document archived?
     */
    readonly archived?: boolean;
    /**
     * Date on which the document was read.
     */
    readonly dateRead?: string;
    /**
     * Has the document been read?
     */
    readonly alreadyRead?: boolean;
    predocumentExists?: boolean;
};

/**
 * Holds a unique key and the corresponding text.
 */
export type EnumText = {
    /**
     * Unique key value for an enumeration type.
     */
    readonly key?: string;
    /**
     * Display text in German language.
     */
    readonly text?: string;
};

/**
 * Model for an order's execution.
 */
export type Execution = {
    /**
     * Execution ID (UUID)
     */
    readonly executionId?: string;
    /**
     * Position (by time) of the execution of an order
     */
    readonly executionNumber?: number;
    /**
     * Quantity of executed units or nominal amount
     */
    readonly executedQuantity?: AmountValue;
    /**
     * Execution price
     */
    readonly executionPrice?: AmountValue;
    /**
     * Date/timestamp of the order entry in UTC in the following format: (MiFID II) YYYY-MM-DDThh:mm:ss,ffffff+zz
     */
    readonly executionTimestamp?: TimestampString;
};

export type FixedTermSavings = {
    /**
     * UUID of the deposit account.
     */
    readonly fixedTermSavingsId?: string;
    /**
     * Total of investment.
     */
    readonly savingsAmount?: AmountValue;
    /**
     * Interest rate of the deposit account.
     */
    readonly interestRate?: string;
    /**
     * Type of the deposit account.
     */
    readonly fixedTermSavingsType?: 'SHORT_TERM' | 'LONG_TERM';
    /**
     * Name of the deposit account.
     */
    readonly fixedTermSavingsDisplayName?: string;
    /**
     * Contract period of the deposit account in months.
     */
    readonly contractPeriodInMonths?: number;
    /**
     * Start date of investment.
     */
    readonly creationDate?: string;
    /**
     * End date of investment.
     */
    readonly expirationDate?: string;
    /**
     * Amount of money for prolongation.
     */
    readonly prolongationAmount?: AmountValue;
    /**
     * Indicates whether the investment can be extended.
     */
    readonly extendable?: boolean;
};

/**
 * additional fund data, if the instrument is a fund
 */
export type FundDistribution = {
    /**
     * Status of fund
     */
    readonly fundStatus?: 'A' | 'K' | 'P' | 'R' | 'V' | 'N' | 'L' | 'D' | 'F' | 'I' | 'M';
    /**
     * List of different features of funds
     */
    readonly fundFlags?: Array<(string)>;
    /**
     * currency of fund
     */
    readonly currency?: string;
    /**
     * Regular issue surcharge
     */
    readonly regularIssueSurcharge?: string;
    /**
     * Discount issue surcharge
     */
    readonly discountIssueSurcharge?: string;
    /**
     * Reduced issue surcharge
     */
    readonly reducedIssueSurcharge?: string;
    /**
     * Individual issue surcharge
     */
    readonly individualIssueSurcharge?: string;
    /**
     * Is individual issue surcharge corrected
     */
    readonly isIndividualIssueSurchargeCorrected?: boolean;
    /**
     * Bonification
     */
    readonly bonification?: string;
    /**
     * Investment category
     */
    readonly investmentCategory?: string;
    /**
     * Total expense ratio
     */
    readonly totalExpenseRatio?: string;
    /**
     * Rating
     */
    readonly rating?: Rating;
};

/**
 * Exchange rate for settlement currency to FX.
 */
export type FXRateEUR = {
    /**
     * Bid rate of settlement currency to FX
     */
    readonly bid?: AmountValue;
    /**
     * Ask rate of settlement currency to FX
     */
    readonly ask?: AmountValue;
};

/**
 * Model for an inducement.
 */
export type Inducement = {
    /**
     * Amount of the inducement
     */
    readonly amount?: AmountValue;
    /**
     * TRUE, if the amount is an estimation
     */
    readonly estimated?: boolean;
};

/**
 * Master data of an installment loan
 */
export type InstallmentLoan = {
    /**
     * Installment loan identifier (UUID).
     */
    readonly installmentLoanId?: string;
    /**
     * SWK number of the installment loan.
     */
    readonly productDisplayId?: string;
    /**
     * Approved loan amount of the initial conclusion of the loan in EUR, including residual debt insurance and interest.
     */
    readonly creditAmount?: AmountValue;
    /**
     * Approved loan amount of the initial conclusion of the loan in EUR, before residual debt insurance and interest.
     */
    readonly netCreditAmount?: AmountValue;
    /**
     * Paid out amount of the approved loan, can include additions or deductions for residual debt insurance or interest.
     */
    readonly paidOutAmount?: AmountValue;
    /**
     * Amount of the installment loan in EUR.
     */
    readonly installmentAmount?: AmountValue;
    /**
     * Runtime of the installment loan in months.
     */
    readonly contractPeriodInMonths?: number;
    /**
     * Effective interest rate.
     */
    readonly effectiveInterest?: string;
    /**
     * Nominal interest rate.
     */
    readonly nominalInterest?: string;
    /**
     * Date of conclusion of the installment loan.
     */
    readonly contractConclusionDate?: string;
};

/**
 * Balance and master data of an installment loan
 */
export type InstallmentLoanBalance = {
    /**
     * Installment loan identifier (UUID).
     */
    readonly installmentLoanId?: string;
    /**
     * Master data of the installment loan.
     */
    readonly installmentLoan?: InstallmentLoan;
    /**
     * Current balance of the installment loan in EUR, including residual debt insurance and interest.
     */
    readonly balance?: AmountValue;
};

/**
 * Model for an instrument.
 */
export type Instrument = {
    /**
     * Instrument id (UUID), unique identification of an instrument (security, derivative, etc.) for future use
     */
    readonly instrumentId?: string;
    /**
     * WKN
     */
    readonly wkn?: string;
    /**
     * ISIN
     */
    readonly isin?: string;
    /**
     * Security symbol according to WM data-service
     */
    readonly mnemonic?: string;
    /**
     * Name of the instrument
     */
    readonly name?: string;
    /**
     * Short name of the instrument
     */
    readonly shortName?: string;
    /**
     * Static data of the instrument, e.g., notation, instrument type
     */
    readonly staticData?: StaticData;
    /**
     * List of the trading venues including the attributes (orderDimensions)
     */
    readonly orderDimensions?: Dimensions;
    /**
     * additional fund data, if the instrument is a fund
     */
    readonly fundsDistribution?: FundDistribution;
    /**
     * additional data of a derivative
     */
    readonly derivativeData?: DerivativeData;
};

export type ListResourceAccountBalance = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<AccountBalance>;
};

export type ListResourceAccountTransaction = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<AccountTransaction>;
};

export type ListResourceCostIndicationExAnte = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<CostIndicationExAnte>;
};

export type ListResourceDepot = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<Depot>;
};

export type ListResourceDepotPosition = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<DepotPosition>;
};

export type ListResourceDepotTransaction = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<DepotTransaction>;
};

export type ListResourceDimensions = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<Dimensions>;
};

export type ListResourceDocument = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<Document>;
};

export type ListResourceInstrument = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<Instrument>;
};

export type ListResourceProductBalance = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<ProductBalance>;
};

export type ListResourceOrder = {
    paging?: PagingInfo;
    aggregated?: AggregatedInfo;
    values?: Array<Order>;
};

/**
 * Model for an order.
 */
export type Order = {
    /**
     * Unique securities account identification (as UUID)
     */
    depotId?: string;
    /**
     * Reference settlement account for the securities account, if different from the settlement account assigned directly to the securities account (UUID)
     */
    settlementAccountId?: string;
    /**
     * Unique order-Id (UUID)
     */
    readonly orderId?: string;
    /**
     * Date/timestamp of the order entry in UTC with the following format: YYYY-MM-DDThh:mm:ss,ffffff+zz
     */
    readonly creationTimestamp?: TimestampString;
    /**
     * Order leg number (if ordertype is OCO or NEO)
     */
    readonly legNumber?: number;
    /**
     * Flag if order is a best-execution-order, default value is false
     */
    bestEx?: boolean;
    /**
     * Ordertype, partially executed and open orders are listed in the execution parameters
     */
    orderType?: 'MARKET' | 'LIMIT' | 'QUOTE' | 'STOP_MARKET' | 'STOP_LIMIT' | 'TRAILING_STOP_MARKET' | 'TRAILING_STOP_LIMIT' | 'ONE_CANCELS_OTHER' | 'NEXT_ORDER';
    /**
     * Status of the order
     */
    readonly orderStatus?: 'PENDING' | 'OPEN' | 'EXECUTED' | 'SETTLED' | 'CANCELLED_USER' | 'EXPIRED' | 'CANCELLED_SYSTEM' | 'CANCELLED_TRADE' | 'UNKNOWN';
    /**
     * Parts of the orders, e.g. combination orders OCO, NEO (Next Order) with different order legs or partially executed or partially cancelled orders with different parts of an order
     */
    subOrders?: Array<Order>;
    /**
     * Type of transaction
     */
    side?: 'BUY' | 'SELL';
    /**
     * WKN, ISIN or uuId; wkn will be returned if instrumentId is entered as wkn, an ISIN is returned if instrumentId is entered as ISIN, a uuId is returned if instrumentId is entered as uuId
     */
    instrumentId?: string;
    /**
     * Quote-Id as reference for the quote received from the trading venue (issuer or exchange) on the quote request
     */
    quoteId?: string;
    /**
     * UUID of the trading venue or partner. This is mandatory, if isBestEx=FALSE
     */
    venueId?: string;
    /**
     * Quantity or nominal amount in the case of a percentage quotation
     */
    quantity?: AmountValue;
    /**
     * Open quantity or nominal amount
     */
    openQuantity?: AmountValue;
    /**
     * Canceled quantity or nominal amount
     */
    cancelledQuantity?: AmountValue;
    /**
     * Canceled quantity or nominal amount
     */
    executedQuantity?: AmountValue;
    /**
     * Order extensions (Fill-or-Kill, Immediate-or-Cancel, All-or-None)
     */
    limitExtension?: 'FOK' | 'IOC' | 'AON';
    /**
     * Restrictions on trade (Opening Auction Only, Auction Only, Closing Auction Only)
     */
    tradingRestriction?: 'OAO' | 'AO' | 'CAO';
    /**
     * Limit of the order, empty in case of a market order, stop market, trailing stop market order or a corresponding suborder
     */
    limit?: AmountValue;
    /**
     * Trigger limit: stop limit by which a Stop order is triggered (Stop, TLS, OCO)
     */
    triggerLimit?: AmountValue;
    /**
     * Distance trigger limit of the trailing stop order from the current absolute price
     */
    trailingLimitDistAbs?: AmountValue;
    /**
     * Distance trigger limit of the trailing stop order from the current price in percentage
     */
    trailingLimitDistRel?: PercentageString;
    /**
     * Type of order validity (Good-for-day (default), Good-til-date (incl. end of month))
     */
    validityType?: 'GFD' | 'GTD';
    /**
     * Date of order validity in format YYYY-MM-DD; required for validityType=GTD
     */
    validity?: DateString;
    /**
     * Expected value of the limit order
     */
    readonly expectedValue?: AmountValue;
    /**
     * List of execution types for the order
     */
    readonly executions?: Array<Execution>;
    /**
     * Ticket UUID for the quote order. This is mandatory, if for a quote order
     */
    quoteTicketId?: string;
    /**
     * Version of the position to be sold. Only applicable for sell
     */
    version?: string;
};

/**
 * Model for an order type.
 */
export type OrderType = {
    /**
     * Names of the possible limit extensions
     */
    readonly limitExtensions?: Array<(string)>;
    /**
     * Names of possible trading restrictions
     */
    readonly tradingRestrictions?: Array<(string)>;
};

export type PagingInfo = {
    index?: number;
    matches?: number;
};

/**
 * Represents the percentage value.
 */
export type PercentageString = {
    /**
     * Pre-decimal places
     */
    preDecimalPlaces?: string;
    /**
     * Decimal places
     */
    decimalPlaces?: string;
    percentString?: string;
};

/**
 * Represents a price.
 */
export type Price = {
    /**
     * Type of the price. Can be one of the following: {LST, BID, ASK, MID}.
     */
    readonly type?: string;
    /**
     * Price.
     */
    readonly price?: AmountValue;
    /**
     * Quantity or nominal amount in case of a percentage quotation.
     */
    readonly quantity?: AmountValue;
    /**
     * Datetime with format: 'yyyy-MM-dd'T'HH:mm:ssX
     */
    readonly priceDateTime?: DateTimeString;
};

/**
 * Model for a product balance.
 */
export type ProductBalance = {
    /**
     * Unique ID of the product (UUID).
     */
    readonly productId?: string;
    /**
     * Type of the product.
     */
    readonly productType?: 'ACCOUNT' | 'CARD' | 'DEPOT' | 'LOAN' | 'SAVINGS';
    /**
     * Unique Id of the target client (UUID).
     */
    readonly targetClientId?: string;
    /**
     * Type of the client connection.
     */
    readonly clientConnectionType?: 'CURRENT_CLIENT' | 'OTHER_COMDIRECT' | 'OTHER_EXTERNAL';
    /**
     * Balance object based on the product type.
     */
    readonly balance?: Balance;
};

/**
 * Model for a quote request.
 */
export type Quote = {
    /**
     * Unique securities account identification (as UUID)
     */
    depotId?: string;
    /**
     * Type of transaction
     */
    side?: 'BUY' | 'SELL';
    /**
     * WKN, ISIN or uuId; wkn will be returned if instrumentId is entered as wkn, an ISIN is returned if instrumentId is entered as ISIN, a uuId is returned if instrumentId is entered as uuId
     */
    instrumentId?: string;
    /**
     * UUID of the trading venue or partner. This is mandatory, if isBestEx=FALSE
     */
    venueId?: string;
    /**
     * Quantity or nominal amount in the case of a percentage quotation
     */
    quantity?: AmountValue;
};

/**
 * Rating of the instrument.
 */
export type Rating = {
    /**
     * Funds Rating
     */
    readonly morningstar?: string;
    /**
     * Bonds Rating
     */
    readonly moodys?: string;
};

/**
 * Model for the current session.
 */
export type Session = {
    id?: number;
    /**
     * Identifier of the session
     */
    identifier?: string;
    /**
     * This boolean is used to point out whether or not the current session has an active session TAN (transaction authentication number). With an active session TAN some use cases, that are genuinely TAN protected, might be callable without asking the client for a TAN. The validation method of session TAN ready use cases will return "TAN_FREE" as a TAN type while the session TAN is activated. The session TAN will be available after a refresh of tokens and dies with the last pair of tokens (access and refresh token).
     */
    sessionTanActive?: boolean;
    /**
     * Boolean indicating whether a second factor is already added to this session
     */
    activated2FA?: boolean;
};

export type StandardErrorResponse = {
    code?: string;
    messages?: Array<BusinessMessage>;
};

/**
 * Static data of the instrument.
 */
export type StaticData = {
    /**
     * Ticker symbol or notation of a security
     */
    readonly notation?: 'XXX' | 'XXC' | 'XXM' | 'XXP' | 'XXU';
    /**
     * instrument currency of a security, e.g., for bonds, bond and open real estate funds; additionally to ISO 4217 currency code the following values are possible: XXX (Pcs.), XXP (Pts.), XXU (Unknown)
     */
    readonly currency?: CurrencyString;
    /**
     * Instrument type
     */
    readonly instrumentType?: 'SHARE' | 'BONDS' | 'SUBSCRIPTION_RIGHT' | 'ETF' | 'PROFIT_PART_CERTIFICATE' | 'FUND' | 'WARRANT' | 'CERTIFICATE' | 'NOT_AVAILABLE';
    /**
     * Flag indicating - if TRUE - that EU-regulation referring to Packaged Retail and Insurance-based Investment Products - PRIIPs) is relevant for the instrument
     */
    readonly priipsRelevant?: boolean;
    /**
     * Flag indicating - if TRUE - that a Key Information Document (KID) of the issuer is electronically available. Before order placement a static note ought to displayed in such a case.
     */
    readonly kidAvailable?: boolean;
    /**
     * Flag indicating - if TRUE - that within prevalidation and before placement of a buy order the investor must approve, e.g., by a frontend checkbox that no shipping of fund sales information is required (waiver); a static note regarding that information ought to be displayed in such a case. Without an explicit waiver the order placement must be prevented in the frontend.
     */
    readonly shippingWaiverRequired?: boolean;
    /**
     * Flag indicating - if TRUE - that within prevalidation and before placement of a buy order a static note must be displayed indicating that the redemption of the fund is limited.
     */
    readonly fundRedemptionLimited?: boolean;
};

/**
 * Represents the date with up to 6 fractions of seconds.
 */
export type TimestampString = {
    /**
     * Date and time with following format: 'yyyy-MM-dd'T'HH:mm:ss,SSSSSSX'
     */
    timestamp?: string;
};

/**
 * Model for a total cost block including total cost entries segregated as: E (own service costs of bank), F (external service costs), and P (product costs).
 */
export type TotalCostBlock = {
    /**
     * Total cost entry for own service costs of bank (E)
     */
    readonly serviceCosts?: TotalCostEntry;
    /**
     * Total amount of inducements for own service costs of bank
     */
    readonly serviceInducement?: AmountValue;
    /**
     * Total cost entry for external service costs (F)
     */
    readonly externalCosts?: TotalCostEntry;
    /**
     * Total cost entry for product costs (P)
     */
    readonly productCosts?: TotalCostEntry;
};

/**
 * Model for a total cost entry.
 */
export type TotalCostEntry = {
    /**
     * Type of total cost entry
     */
    readonly type?: 'E' | 'F' | 'P';
    /**
     * Label of total cost entry
     */
    readonly label?: string;
    /**
     * Total cost in reporting currency
     */
    readonly amount?: AmountValue;
    /**
     * Average return reduction per year
     */
    readonly averageReturnPA?: PercentageString;
};

/**
 * List of cost blocks over time.
 */
export type TotalHoldingCostBlock = {
    /**
     * Total holding cost entry for the first year
     */
    readonly year1?: TotalHoldingCostEntry;
    /**
     * Total holding cost entry for the second year
     */
    readonly year2?: TotalHoldingCostEntry;
    /**
     * Total holding cost entry for the year of the sale
     */
    readonly sales?: TotalHoldingCostEntry;
};

/**
 * Model for cost block over time.
 */
export type TotalHoldingCostEntry = {
    /**
     * Type of total holding cost entry
     */
    readonly type?: 'IM_ERSTEN_JAHR' | 'IM_ZWEITEN_JAHR' | 'IM_JAHR_DER_VERAUESSERUNG';
    /**
     * Cost in reporting currency
     */
    readonly amount?: AmountValue;
    /**
     * Average return reduction per year
     */
    readonly averageReturnPA?: PercentageString;
};

/**
 * Model for a venue.
 */
export type Venue = {
    name?: string;
    venueId?: string;
    country?: string;
    type?: string;
    currencies?: Array<CurrencyString>;
    sides?: Array<(string)>;
    validityTypes?: Array<(string)>;
    orderTypes?: {
        [key: string]: OrderType;
    };
};

export type VisaCardImage = {
    /**
     * Visa card image ID to be used in the application
     */
    readonly visaCardImageId?: string;
    /**
     * Description of the image
     */
    readonly imageDescription?: string;
    /**
     * Base filename for the files representing the image. The name has to be extended with a postfix indicating the resolution and file type, e.g. -1x.jpg. The resulting filename can be used to retrieve the image from the comdirect CMS
     */
    readonly imageBaseFilename?: string;
};

export type BankingV2GetAccountBalancesData = {
    /**
     * Can be either the customer identification number (UUID) or 'user'
     */
    user: string;
    /**
     * Suppresses the master data of the accounts
     */
    withoutAttr?: string;
};

export type BankingV2GetAccountBalancesResponse = ListResourceAccountBalance;

export type BankingV1GetAccountTransactionsData = {
    /**
     * Account identifier (UUID)
     */
    accountId: string;
    /**
     * Index of the first transaction.
     */
    pagingFirst?: number;
    /**
     * Filters for CREDIT, DEBIT or CREDIT_AND_DEBIT
     */
    transactionDirection?: 'CREDIT' | 'DEBIT' | 'CREDIT_AND_DEBIT';
    /**
     * Filters for AccountTransactions. Will return all AccountTransactions (BOTH), or return all booked AccountTransactions (BOOKED), or all not booked AccountTransactions (NOTBOOKED).
     */
    transactionState?: 'BOOKED' | 'NOTBOOKED' | 'BOTH';
    /**
     * Enforce to load the master data of an attribute. Currently supported attributes: account
     */
    withAttr?: string;
};

export type BankingV1GetAccountTransactionsResponse = ListResourceAccountTransaction;

export type BankingV2GetAccountBalanceData = {
    /**
     * Account identifier (UUID)
     */
    accountId: string;
    /**
     * Suppresses the master data of the account
     */
    withoutAttr?: string;
};

export type BankingV2GetAccountBalanceResponse = AccountBalance;

export type BrokerageV3GetDepotsData = {
    /**
     * UUID of the user to search depots for, or the string 'user' to use the logged in user
     */
    userId: string;
};

export type BrokerageV3GetDepotsResponse = ListResourceDepot;

export type BrokerageV3GetOrdersData = {
    /**
     * Reference to securities account number (as UUID).
     */
    depotId: string;
    /**
     * Instrument id (UUID), unique identification of an instrument (security, derivative, etc.).
     */
    instrumentId?: string;
    /**
     * ISIN
     */
    isin?: string;
    /**
     * Maximum value of order's creation timestamp in UTC with the following format: YYYY-MM-DDThh:mm:ss,ffffff+zz.
     */
    maxCreationTimeStamp?: string;
    /**
     * Minimum value of order's creation timestamp in UTC with the following format: YYYY-MM-DDThh:mm:ss,ffffff+zz.
     */
    minCreationTimeStamp?: string;
    /**
     * Status of the order.
     */
    orderStatus?: 'PENDING' | 'OPEN' | 'EXECUTED' | 'SETTLED' | 'CANCELLED_USER' | 'EXPIRED' | 'CANCELLED_SYSTEM' | 'CANCELLED_TRADE' | 'UNKNOWN';
    /**
     * The order type.
     */
    orderType?: 'MARKET' | 'LIMIT' | 'QUOTE' | 'STOP_MARKET' | 'STOP_LIMIT' | 'TRAILING_STOP_MARKET' | 'TRAILING_STOP_LIMIT' | 'ONE_CANCELS_OTHER' | 'NEXT_ORDER';
    /**
     * Possible transaction types
     */
    side?: 'BUY' | 'SELL';
    /**
     * Venue id (UUID), unique identification of a venue.
     */
    venueId?: string;
    /**
     * enables attribute: instrument.
     */
    withAttr?: string;
    /**
     * Disables attribute: executions.
     */
    withoutAttr?: string;
    /**
     * WKN
     */
    wkn?: string;
};

export type BrokerageV3GetOrdersResponse = ListResourceOrder;

export type BrokerageV1GetInstrumentData = {
    /**
     * Instrument identification - can be either the WKN, the ISIN or the symbol of the instrument
     */
    instrumentId: string;
    /**
     * Enables attribute: orderDimensions
     */
    withAttr?: Array<string>;
    /**
     * Disables attribute: staticData
     */
    withoutAttr?: Array<string>;
};

export type BrokerageV1GetInstrumentResponse = ListResourceInstrument;

export type BrokerageV3GetDepotPositionsData = {
    /**
     * Reference to securities account number (as UUID).
     */
    depotId: string;
    /**
     * Instrument identification - can either be the WKN, the ISIN or the UUID of the instrument.
     */
    instrumentId?: string;
    /**
     * Enables additional attributes for this request. Allowed attributes: instrument
     */
    withAttr?: string;
    /**
     * Disables attributes for this request. Allowed attributes: depot, positions
     */
    withoutAttr?: Array<string>;
};

export type BrokerageV3GetDepotPositionsResponse = ListResourceDepotPosition;

export type BrokerageV3GetDepotPositionData = {
    /**
     * Reference to securities account number (as UUID).
     */
    depotId: string;
    /**
     * Position identification number in securities account (as UUID)
     */
    positionId: string;
    /**
     * Enables additional attributes for this request. Allowed attributes: instrument
     */
    withAttr?: string;
};

export type BrokerageV3GetDepotPositionResponse = DepotPosition;

export type BrokerageV3GetDepotTransactionsData = {
    /**
     * Reference to securities account number (as UUID).
     */
    depotId: string;
    /**
     * Instrument id (UUID), unique identification of an instrument.
     */
    instrumentId?: string;
    /**
     * ISIN
     */
    isin?: string;
    /**
     * Earliest booking date of the transaction. Format: YYYY-MM-DD or as negative offset from the current date e.g. -10d
     */
    minBookingDate?: string;
    /**
     * WKN
     */
    wkn?: string;
};

export type BrokerageV3GetDepotTransactionsResponse = ListResourceDepotTransaction;

export type BrokerageV3PostOrderData = {
    body?: Order;
};

export type BrokerageV3PostOrderResponse = Order;

export type BrokerageV3GetOrdersCostIndicationExAnteData = {
    /**
     * The Order for which the cost indication is to be calculated
     */
    order: Order;
};

export type BrokerageV3GetOrdersCostIndicationExAnteResponse = ListResourceCostIndicationExAnte;

export type BrokerageV3GetOrderDimensionsData = {
    /**
     * Country of venue in ISO 3166-2.
     */
    country?: string;
    /**
     * The custody type.
     */
    custodyType?: string;
    /**
     * Instrument id (UUID), unique identification of an instrument (security, derivative, etc.).
     */
    instrumentId?: string;
    /**
     * ISIN
     */
    isin?: string;
    /**
     * The order type.
     */
    orderType?: 'MARKET' | 'LIMIT' | 'QUOTE' | 'STOP_MARKET' | 'STOP_LIMIT' | 'TRAILING_STOP_MARKET' | 'TRAILING_STOP_LIMIT' | 'ONE_CANCELS_OTHER' | 'NEXT_ORDER';
    /**
     * Possible transaction types.
     */
    side?: 'BUY' | 'SELL';
    /**
     * Type of venue.
     */
    type?: 'EXCHANGE' | 'FUND' | 'OFF';
    /**
     * Venue id (UUID), unique identification of a venue.
     */
    venueId?: string;
    /**
     * WKN
     */
    wkn?: string;
};

export type BrokerageV3GetOrderDimensionsResponse = ListResourceDimensions;

export type BrokerageV3PostOrdersPrevalidationData = {
    body?: Order;
};

export type BrokerageV3PostOrdersPrevalidationResponse = Order;

export type BrokerageV3PostOrdersValidationData = {
    body?: Order;
};

export type BrokerageV3PostOrdersValidationResponse = Order;

export type BrokerageV3GetOrderData = {
    /**
     * Unique orderId (UUID).
     */
    orderId: string;
    /**
     * Disables attribute: executions.
     */
    withoutAttr?: string;
};

export type BrokerageV3GetOrderResponse = Order;

export type BrokerageV3DeleteOrderData = {
    /**
     * Reference to order identifier (as UUID).
     */
    orderId: string;
};

export type BrokerageV3DeleteOrderResponse = Order;

export type BrokerageV3PatchOrderData = {
    body?: Order;
    /**
     * Reference to order identifier (as UUID).
     */
    orderId: string;
};

export type BrokerageV3PatchOrderResponse = Order;

export type BrokerageV3GetOrderCostIndicationExAnteData = {
    /**
     * The Order for which the cost indication is to be calculated
     */
    order: Order;
    /**
     * Reference to order identifier (as UUID).
     */
    orderId: string;
};

export type BrokerageV3GetOrderCostIndicationExAnteResponse = ListResourceCostIndicationExAnte;

export type BrokerageV3PostOrderPrevalidationData = {
    body?: string;
    /**
     * Reference to order identifier (as UUID).
     */
    orderId: string;
};

export type BrokerageV3PostOrderPrevalidationResponse = Order;

export type BrokerageV3PostOrderValidationData = {
    body?: string;
    /**
     * Reference to order identifier (as UUID).
     */
    orderId: string;
};

export type BrokerageV3PostOrderValidationResponse = Order;

export type BrokerageV3PostQuoteRequestData = {
    body?: Quote;
};

export type BrokerageV3PostQuoteRequestResponse = Quote;

export type BrokerageV3PostQuoteTicketData = {
    /**
     * The order for which a ticket will be acquired
     */
    order: Order;
};

export type BrokerageV3PostQuoteTicketResponse = Order;

export type BrokerageV3PatchQuoteTicketData = {
    /**
     * Reference to the quote ticket (as UUID).
     */
    ticketId: string;
};

export type MessagesV2GetDocumentsData = {
    /**
     * The maximum number of results that will be returned.
     */
    pagingCount?: number;
    /**
     * Index of the returning results.
     */
    pagingFirst?: number;
    /**
     * The literal "user" or the unique ID of the client.
     */
    user: string;
};

export type MessagesV2GetDocumentsResponse = ListResourceDocument;

export type MessagesV2GetDocumentData = {
    /**
     * The unique ID of the document.
     */
    documentId: string;
};

export type MessagesV2GetPredocumentData = {
    /**
     * The unique ID of the document.
     */
    documentId: string;
};

export type ReportsV1GetParticipantBalancesData = {
    /**
     * A single ConnectionType of a client connection or a list of ConnectionTypes.
     */
    clientConnectionType?: Array<string>;
    /**
     * Filter for a single or list of product types.
     */
    productType?: Array<string>;
    /**
     * A single UUID of a target client or a list of UUIDs.
     */
    targetClientId?: Array<string>;
    /**
     * The literal "user" or the UUID of the participant.
     */
    user: string;
    /**
     * Prevents setting the static data in the balance objects.
     */
    withoutAttr?: Array<string>;
};

export type ReportsV1GetParticipantBalancesResponse = ListResourceProductBalance;

export type SessionV1GetSessionData = {
    /**
     * The literal "user" or the UUID of the client.
     */
    user: string;
};

export type SessionV1GetSessionResponse = Array<Session>;

export type SessionV1PatchSessionData = {
    body?: Session;
    /**
     * Reference to the session (UUID)
     */
    session: string;
    /**
     * The literal "user" or the UUID of the client.
     */
    user: string;

    id: string;
};

export type SessionV1PatchSessionResponse = Session;

export type SessionV1PostSessionValidationData = {
    body?: Session;
    /**
     * Reference to the session (UUID)
     */
    session: string;
    /**
     * The literal "user" or the UUID of the client.
     */
    user: string;
};

export type SessionValidationResponseLink = {
  href: string;
  rel: string;
  method: string;
  type: string;
};

export type SessionValidationResponse = {
  id: string;
  typ: string;
  availableTypes: string[];
  link: SessionValidationResponseLink;
};

export type SessionV1PostSessionValidationResponse = SessionValidationResponse;


export type AuthCredentials = {
  client_id: string;
  client_secret: string;
  grant_type: 'password' | 'cd_secondary';
  username?: string;
  password?: string;
  token?: string;
};

export type OAuthData = {
  formData?: AuthCredentials;
};

export type AuthenticationData = {
  access_token: string;
  token_type: string;
  refresh_token: string;
  expires_in: number;
  scope: string;
  kdnr: string;
  bpid: string;
  kontaktId: string;
}

export type OAuthResponse = AuthenticationData;

export type $OpenApiTs = {
    '/banking/clients/{user}/v2/accounts/balances': {
        get: {
            req: BankingV2GetAccountBalancesData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceAccountBalance;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Unexpected Error
                 */
                500: unknown;
            };
        };
    };
    '/banking/v1/accounts/{accountId}/transactions': {
        get: {
            req: BankingV1GetAccountTransactionsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceAccountTransaction;
                /**
                 * No transactions found
                 */
                404: unknown;
                /**
                 * Error in request parameter
                 */
                422: unknown;
                /**
                 * An internal Error occurred
                 */
                500: unknown;
            };
        };
    };
    '/banking/v2/accounts/{accountId}/balances': {
        get: {
            req: BankingV2GetAccountBalanceData;
            res: {
                /**
                 * successful operation
                 */
                200: AccountBalance;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Unexpected Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/clients/{userId}/v3/depots': {
        get: {
            req: BrokerageV3GetDepotsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceDepot;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Unexpected Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/depots/{depotId}/v3/orders': {
        get: {
            req: BrokerageV3GetOrdersData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceOrder;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v1/instruments/{instrumentId}': {
        get: {
            req: BrokerageV1GetInstrumentData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceInstrument;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/v3/depots/{depotId}/positions': {
        get: {
            req: BrokerageV3GetDepotPositionsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceDepotPosition;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Unexpected Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/depots/{depotId}/positions/{positionId}': {
        get: {
            req: BrokerageV3GetDepotPositionData;
            res: {
                /**
                 * successful operation
                 */
                200: DepotPosition;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Unexpected Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/depots/{depotId}/transactions': {
        get: {
            req: BrokerageV3GetDepotTransactionsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceDepotTransaction;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders': {
        post: {
            req: BrokerageV3PostOrderData;
            res: {
                /**
                 * successful operation
                 */
                201: Order;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/costindicationexante': {
        post: {
            req: BrokerageV3GetOrdersCostIndicationExAnteData;
            res: {
                /**
                 * successful operation
                 */
                201: ListResourceCostIndicationExAnte;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/v3/orders/dimensions': {
        get: {
            req: BrokerageV3GetOrderDimensionsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceDimensions;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/prevalidation': {
        post: {
            req: BrokerageV3PostOrdersPrevalidationData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/validation': {
        post: {
            req: BrokerageV3PostOrdersValidationData;
            res: {
                /**
                 * successful operation
                 */
                201: Order;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/{orderId}': {
        get: {
            req: BrokerageV3GetOrderData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
        delete: {
            req: BrokerageV3DeleteOrderData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
        patch: {
            req: BrokerageV3PatchOrderData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/{orderId}/costindicationexante': {
        post: {
            req: BrokerageV3GetOrderCostIndicationExAnteData;
            res: {
                /**
                 * successful operation
                 */
                201: ListResourceCostIndicationExAnte;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/v3/orders/{orderId}/prevalidation': {
        post: {
            req: BrokerageV3PostOrderPrevalidationData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/orders/{orderId}/validation': {
        post: {
            req: BrokerageV3PostOrderValidationData;
            res: {
                /**
                 * successful operation
                 */
                201: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/brokerage/v3/quotes': {
        post: {
            req: BrokerageV3PostQuoteRequestData;
            res: {
                /**
                 * successful operation
                 */
                200: Quote;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/v3/quoteticket': {
        post: {
            req: BrokerageV3PostQuoteTicketData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/brokerage/v3/quoteticket/{ticketId}': {
        patch: {
            req: BrokerageV3PatchQuoteTicketData;
            res: {
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/messages/clients/{user}/v2/documents': {
        get: {
            req: MessagesV2GetDocumentsData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceDocument;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/messages/v2/documents/{documentId}': {
        get: {
            req: MessagesV2GetDocumentData;
            res: {
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/messages/v2/documents/{documentId}/predocument': {
        get: {
            req: MessagesV2GetPredocumentData;
            res: {
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Internal Server Error
                 */
                500: unknown;
                /**
                 * Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/reports/participants/{user}/v1/allbalances': {
        get: {
            req: ReportsV1GetParticipantBalancesData;
            res: {
                /**
                 * successful operation
                 */
                200: ListResourceProductBalance;
                /**
                 * Not Found
                 */
                404: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: StandardErrorResponse;
                /**
                 * Not Implemented
                 */
                501: unknown;
            };
        };
    };
    '/session/clients/{user}/v1/sessions': {
        get: {
            req: SessionV1GetSessionData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<Session>;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/session/clients/{user}/v1/sessions/{session}': {
        patch: {
            req: SessionV1PatchSessionData;
            res: {
                /**
                 * successful operation
                 */
                200: Session;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/session/clients/{user}/v1/sessions/{session}/validate': {
        post: {
            req: SessionV1PostSessionValidationData;
            res: {
                /**
                 * successful operation
                 */
                200: Session;
                /**
                 * Unprocessable Entity
                 */
                422: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
};
